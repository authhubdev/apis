// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file auth/v1/session.proto (package auth.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AuthResponse } from "./common_pb";
import { file_auth_v1_common } from "./common_pb";
import type { SuccessResponse } from "../../common/v1/common_pb";
import { file_common_v1_common } from "../../common/v1/common_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file auth/v1/session.proto.
 */
export const file_auth_v1_session: GenFile = /*@__PURE__*/
  fileDesc("ChVhdXRoL3YxL3Nlc3Npb24ucHJvdG8SB2F1dGgudjEi/wEKB1Nlc3Npb24SCgoCaWQYASABKAkSDwoHdXNlcl9pZBgCIAEoCRIKCgJpcBgDIAEoCRISCgp1c2VyX2FnZW50GAQgASgJEhAKCGxvY2F0aW9uGAUgASgJEg8KB2N1cnJlbnQYBiABKAgSLgoKY3JlYXRlZF9hdBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKZXhwaXJlc19hdBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASNAoQbGFzdF9hY2Nlc3NlZF9hdBgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiEwoRR2V0U2Vzc2lvblJlcXVlc3QiNwoSR2V0U2Vzc2lvblJlc3BvbnNlEiEKB3Nlc3Npb24YASABKAsyEC5hdXRoLnYxLlNlc3Npb24iFQoTTGlzdFNlc3Npb25zUmVxdWVzdCJJChRMaXN0U2Vzc2lvbnNSZXNwb25zZRIiCghzZXNzaW9ucxgBIAMoCzIQLmF1dGgudjEuU2Vzc2lvbhINCgV0b3RhbBgCIAEoDSJIChRSZXZva2VTZXNzaW9uUmVxdWVzdBIwCgpzZXNzaW9uX2lkGAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIkMKFVJldm9rZVNlc3Npb25SZXNwb25zZRIqCgZyZXN1bHQYASABKAsyGi5jb21tb24udjEuU3VjY2Vzc1Jlc3BvbnNlIkwKGFJldm9rZUFsbFNlc3Npb25zUmVxdWVzdBIwCgxrZWVwX2N1cnJlbnQYASABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlIkcKGVJldm9rZUFsbFNlc3Npb25zUmVzcG9uc2USKgoGcmVzdWx0GAEgASgLMhouY29tbW9uLnYxLlN1Y2Nlc3NSZXNwb25zZSIcChpSZXZva2VPdGhlclNlc3Npb25zUmVxdWVzdCJJChtSZXZva2VPdGhlclNlc3Npb25zUmVzcG9uc2USKgoGcmVzdWx0GAEgASgLMhouY29tbW9uLnYxLlN1Y2Nlc3NSZXNwb25zZSIsChNSZWZyZXNoVG9rZW5SZXF1ZXN0EhUKDXJlZnJlc2hfdG9rZW4YASABKAkiOwoUUmVmcmVzaFRva2VuUmVzcG9uc2USIwoEYXV0aBgBIAEoCzIVLmF1dGgudjEuQXV0aFJlc3BvbnNlMosECg5TZXNzaW9uU2VydmljZRJHCgpHZXRTZXNzaW9uEhouYXV0aC52MS5HZXRTZXNzaW9uUmVxdWVzdBobLmF1dGgudjEuR2V0U2Vzc2lvblJlc3BvbnNlIgASTQoMTGlzdFNlc3Npb25zEhwuYXV0aC52MS5MaXN0U2Vzc2lvbnNSZXF1ZXN0Gh0uYXV0aC52MS5MaXN0U2Vzc2lvbnNSZXNwb25zZSIAElAKDVJldm9rZVNlc3Npb24SHS5hdXRoLnYxLlJldm9rZVNlc3Npb25SZXF1ZXN0Gh4uYXV0aC52MS5SZXZva2VTZXNzaW9uUmVzcG9uc2UiABJcChFSZXZva2VBbGxTZXNzaW9ucxIhLmF1dGgudjEuUmV2b2tlQWxsU2Vzc2lvbnNSZXF1ZXN0GiIuYXV0aC52MS5SZXZva2VBbGxTZXNzaW9uc1Jlc3BvbnNlIgASYgoTUmV2b2tlT3RoZXJTZXNzaW9ucxIjLmF1dGgudjEuUmV2b2tlT3RoZXJTZXNzaW9uc1JlcXVlc3QaJC5hdXRoLnYxLlJldm9rZU90aGVyU2Vzc2lvbnNSZXNwb25zZSIAEk0KDFJlZnJlc2hUb2tlbhIcLmF1dGgudjEuUmVmcmVzaFRva2VuUmVxdWVzdBodLmF1dGgudjEuUmVmcmVzaFRva2VuUmVzcG9uc2UiAEIyWjBnaXRodWIuY29tL2F1dGhodWJkZXYvYXBpcy9nZW4vZ28vYXV0aC92MTthdXRodjFiBnByb3RvMw", [file_auth_v1_common, file_common_v1_common, file_google_protobuf_timestamp, file_google_protobuf_wrappers]);

/**
 * Session contains information about a user's authentication session.
 *
 * @generated from message auth.v1.Session
 */
export type Session = Message<"auth.v1.Session"> & {
  /**
   * Unique identifier for the session.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User ID associated with the session.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * IP address from which the session was created.
   *
   * @generated from field: string ip = 3;
   */
  ip: string;

  /**
   * User agent (browser/device) information.
   *
   * @generated from field: string user_agent = 4;
   */
  userAgent: string;

  /**
   * Location information derived from the IP.
   *
   * @generated from field: string location = 5;
   */
  location: string;

  /**
   * Whether this is the current active session.
   *
   * @generated from field: bool current = 6;
   */
  current: boolean;

  /**
   * Creation timestamp.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * Expiration timestamp.
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 8;
   */
  expiresAt?: Timestamp;

  /**
   * Last access timestamp.
   *
   * @generated from field: google.protobuf.Timestamp last_accessed_at = 9;
   */
  lastAccessedAt?: Timestamp;
};

/**
 * Describes the message auth.v1.Session.
 * Use `create(SessionSchema)` to create a new message.
 */
export const SessionSchema: GenMessage<Session> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 0);

/**
 * GetSessionRequest is used to retrieve the current session information.
 *
 * @generated from message auth.v1.GetSessionRequest
 */
export type GetSessionRequest = Message<"auth.v1.GetSessionRequest"> & {
};

/**
 * Describes the message auth.v1.GetSessionRequest.
 * Use `create(GetSessionRequestSchema)` to create a new message.
 */
export const GetSessionRequestSchema: GenMessage<GetSessionRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 1);

/**
 * GetSessionResponse contains the current session details.
 *
 * @generated from message auth.v1.GetSessionResponse
 */
export type GetSessionResponse = Message<"auth.v1.GetSessionResponse"> & {
  /**
   * Current session information.
   *
   * @generated from field: auth.v1.Session session = 1;
   */
  session?: Session;
};

/**
 * Describes the message auth.v1.GetSessionResponse.
 * Use `create(GetSessionResponseSchema)` to create a new message.
 */
export const GetSessionResponseSchema: GenMessage<GetSessionResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 2);

/**
 * ListSessionsRequest is used to retrieve all active sessions.
 *
 * @generated from message auth.v1.ListSessionsRequest
 */
export type ListSessionsRequest = Message<"auth.v1.ListSessionsRequest"> & {
};

/**
 * Describes the message auth.v1.ListSessionsRequest.
 * Use `create(ListSessionsRequestSchema)` to create a new message.
 */
export const ListSessionsRequestSchema: GenMessage<ListSessionsRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 3);

/**
 * ListSessionsResponse contains a list of all active sessions.
 *
 * @generated from message auth.v1.ListSessionsResponse
 */
export type ListSessionsResponse = Message<"auth.v1.ListSessionsResponse"> & {
  /**
   * List of active sessions.
   *
   * @generated from field: repeated auth.v1.Session sessions = 1;
   */
  sessions: Session[];

  /**
   * Total count of active sessions.
   *
   * @generated from field: uint32 total = 2;
   */
  total: number;
};

/**
 * Describes the message auth.v1.ListSessionsResponse.
 * Use `create(ListSessionsResponseSchema)` to create a new message.
 */
export const ListSessionsResponseSchema: GenMessage<ListSessionsResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 4);

/**
 * RevokeSessionRequest is used to terminate a specific session.
 *
 * @generated from message auth.v1.RevokeSessionRequest
 */
export type RevokeSessionRequest = Message<"auth.v1.RevokeSessionRequest"> & {
  /**
   * ID of the session to revoke.
   *
   * @generated from field: google.protobuf.StringValue session_id = 1;
   */
  sessionId?: string;
};

/**
 * Describes the message auth.v1.RevokeSessionRequest.
 * Use `create(RevokeSessionRequestSchema)` to create a new message.
 */
export const RevokeSessionRequestSchema: GenMessage<RevokeSessionRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 5);

/**
 * RevokeSessionResponse confirms the session termination.
 *
 * @generated from message auth.v1.RevokeSessionResponse
 */
export type RevokeSessionResponse = Message<"auth.v1.RevokeSessionResponse"> & {
  /**
   * Operation result.
   *
   * @generated from field: common.v1.SuccessResponse result = 1;
   */
  result?: SuccessResponse;
};

/**
 * Describes the message auth.v1.RevokeSessionResponse.
 * Use `create(RevokeSessionResponseSchema)` to create a new message.
 */
export const RevokeSessionResponseSchema: GenMessage<RevokeSessionResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 6);

/**
 * RevokeAllSessionsRequest is used to terminate all sessions.
 *
 * @generated from message auth.v1.RevokeAllSessionsRequest
 */
export type RevokeAllSessionsRequest = Message<"auth.v1.RevokeAllSessionsRequest"> & {
  /**
   * Whether to keep the current session active.
   *
   * @generated from field: google.protobuf.BoolValue keep_current = 1;
   */
  keepCurrent?: boolean;
};

/**
 * Describes the message auth.v1.RevokeAllSessionsRequest.
 * Use `create(RevokeAllSessionsRequestSchema)` to create a new message.
 */
export const RevokeAllSessionsRequestSchema: GenMessage<RevokeAllSessionsRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 7);

/**
 * RevokeAllSessionsResponse confirms all sessions were terminated.
 *
 * @generated from message auth.v1.RevokeAllSessionsResponse
 */
export type RevokeAllSessionsResponse = Message<"auth.v1.RevokeAllSessionsResponse"> & {
  /**
   * Operation result.
   *
   * @generated from field: common.v1.SuccessResponse result = 1;
   */
  result?: SuccessResponse;
};

/**
 * Describes the message auth.v1.RevokeAllSessionsResponse.
 * Use `create(RevokeAllSessionsResponseSchema)` to create a new message.
 */
export const RevokeAllSessionsResponseSchema: GenMessage<RevokeAllSessionsResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 8);

/**
 * RevokeOtherSessionsRequest is used to terminate all sessions except the current one.
 *
 * @generated from message auth.v1.RevokeOtherSessionsRequest
 */
export type RevokeOtherSessionsRequest = Message<"auth.v1.RevokeOtherSessionsRequest"> & {
};

/**
 * Describes the message auth.v1.RevokeOtherSessionsRequest.
 * Use `create(RevokeOtherSessionsRequestSchema)` to create a new message.
 */
export const RevokeOtherSessionsRequestSchema: GenMessage<RevokeOtherSessionsRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 9);

/**
 * RevokeOtherSessionsResponse confirms other sessions were terminated.
 *
 * @generated from message auth.v1.RevokeOtherSessionsResponse
 */
export type RevokeOtherSessionsResponse = Message<"auth.v1.RevokeOtherSessionsResponse"> & {
  /**
   * Operation result.
   *
   * @generated from field: common.v1.SuccessResponse result = 1;
   */
  result?: SuccessResponse;
};

/**
 * Describes the message auth.v1.RevokeOtherSessionsResponse.
 * Use `create(RevokeOtherSessionsResponseSchema)` to create a new message.
 */
export const RevokeOtherSessionsResponseSchema: GenMessage<RevokeOtherSessionsResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 10);

/**
 * RefreshTokenRequest is used to refresh an expired authentication token.
 *
 * @generated from message auth.v1.RefreshTokenRequest
 */
export type RefreshTokenRequest = Message<"auth.v1.RefreshTokenRequest"> & {
  /**
   * Refresh token obtained during login or previous refresh.
   *
   * @generated from field: string refresh_token = 1;
   */
  refreshToken: string;
};

/**
 * Describes the message auth.v1.RefreshTokenRequest.
 * Use `create(RefreshTokenRequestSchema)` to create a new message.
 */
export const RefreshTokenRequestSchema: GenMessage<RefreshTokenRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 11);

/**
 * RefreshTokenResponse contains the new authentication tokens.
 *
 * @generated from message auth.v1.RefreshTokenResponse
 */
export type RefreshTokenResponse = Message<"auth.v1.RefreshTokenResponse"> & {
  /**
   * New authentication tokens.
   *
   * @generated from field: auth.v1.AuthResponse auth = 1;
   */
  auth?: AuthResponse;
};

/**
 * Describes the message auth.v1.RefreshTokenResponse.
 * Use `create(RefreshTokenResponseSchema)` to create a new message.
 */
export const RefreshTokenResponseSchema: GenMessage<RefreshTokenResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_session, 12);

/**
 * SessionService provides management of user sessions.
 *
 * @generated from service auth.v1.SessionService
 */
export const SessionService: GenService<{
  /**
   * GetSession retrieves details about the current session.
   *
   * @generated from rpc auth.v1.SessionService.GetSession
   */
  getSession: {
    methodKind: "unary";
    input: typeof GetSessionRequestSchema;
    output: typeof GetSessionResponseSchema;
  },
  /**
   * ListSessions retrieves all active sessions for the current user.
   *
   * @generated from rpc auth.v1.SessionService.ListSessions
   */
  listSessions: {
    methodKind: "unary";
    input: typeof ListSessionsRequestSchema;
    output: typeof ListSessionsResponseSchema;
  },
  /**
   * RevokeSession terminates a specific session by its ID.
   *
   * @generated from rpc auth.v1.SessionService.RevokeSession
   */
  revokeSession: {
    methodKind: "unary";
    input: typeof RevokeSessionRequestSchema;
    output: typeof RevokeSessionResponseSchema;
  },
  /**
   * RevokeAllSessions terminates all sessions for the current user.
   *
   * @generated from rpc auth.v1.SessionService.RevokeAllSessions
   */
  revokeAllSessions: {
    methodKind: "unary";
    input: typeof RevokeAllSessionsRequestSchema;
    output: typeof RevokeAllSessionsResponseSchema;
  },
  /**
   * RevokeOtherSessions terminates all sessions except the current one.
   *
   * @generated from rpc auth.v1.SessionService.RevokeOtherSessions
   */
  revokeOtherSessions: {
    methodKind: "unary";
    input: typeof RevokeOtherSessionsRequestSchema;
    output: typeof RevokeOtherSessionsResponseSchema;
  },
  /**
   * RefreshToken refreshes an expired token using a refresh token.
   *
   * @generated from rpc auth.v1.SessionService.RefreshToken
   */
  refreshToken: {
    methodKind: "unary";
    input: typeof RefreshTokenRequestSchema;
    output: typeof RefreshTokenResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_auth_v1_session, 0);

