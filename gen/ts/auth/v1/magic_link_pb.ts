// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file auth/v1/magic_link.proto (package auth.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AuthResponse, SuccessResponse } from "./common_pb";
import { file_auth_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file auth/v1/magic_link.proto.
 */
export const file_auth_v1_magic_link: GenFile = /*@__PURE__*/
  fileDesc("ChhhdXRoL3YxL21hZ2ljX2xpbmsucHJvdG8SB2F1dGgudjEilwEKFFNlbmRNYWdpY0xpbmtSZXF1ZXN0Eg0KBWVtYWlsGAEgASgJEhEKBG5hbWUYAiABKAlIAIgBARIZCgxyZWRpcmVjdF91cmwYAyABKAlIAYgBARIYCgt0dGxfc2Vjb25kcxgEIAEoBUgCiAEBQgcKBV9uYW1lQg8KDV9yZWRpcmVjdF91cmxCDgoMX3R0bF9zZWNvbmRzIrUBChVTZW5kTWFnaWNMaW5rUmVzcG9uc2USKAoGcmVzdWx0GAEgASgLMhguYXV0aC52MS5TdWNjZXNzUmVzcG9uc2USFwoKZXhwaXJlc19hdBgCIAEoA0gAiAEBEhgKC2lzX25ld191c2VyGAMgASgISAGIAQESFAoHdXNlcl9pZBgEIAEoCUgCiAEBQg0KC19leHBpcmVzX2F0Qg4KDF9pc19uZXdfdXNlckIKCghfdXNlcl9pZCInChZWZXJpZnlNYWdpY0xpbmtSZXF1ZXN0Eg0KBXRva2VuGAEgASgJIj4KF1ZlcmlmeU1hZ2ljTGlua1Jlc3BvbnNlEiMKBGF1dGgYASABKAsyFS5hdXRoLnYxLkF1dGhSZXNwb25zZTK8AQoUQXV0aE1hZ2ljTGlua1NlcnZpY2USTgoNU2VuZE1hZ2ljTGluaxIdLmF1dGgudjEuU2VuZE1hZ2ljTGlua1JlcXVlc3QaHi5hdXRoLnYxLlNlbmRNYWdpY0xpbmtSZXNwb25zZRJUCg9WZXJpZnlNYWdpY0xpbmsSHy5hdXRoLnYxLlZlcmlmeU1hZ2ljTGlua1JlcXVlc3QaIC5hdXRoLnYxLlZlcmlmeU1hZ2ljTGlua1Jlc3BvbnNlQjJaMGdpdGh1Yi5jb20vYXV0aGh1YmRldi9hcGlzL2dlbi9nby9hdXRoL3YxO2F1dGh2MWIGcHJvdG8z", [file_auth_v1_common]);

/**
 * SendMagicLinkRequest contains information for generating a magic link.
 *
 * @generated from message auth.v1.SendMagicLinkRequest
 */
export type SendMagicLinkRequest = Message<"auth.v1.SendMagicLinkRequest"> & {
  /**
   * Email address of the user.
   * Must be a valid email format between 5 and 255 characters.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * Optional user name.
   * If provided, must be between 2 and 100 characters.
   * Only used when creating a new user account.
   *
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * Optional redirect URL after successful authentication.
   * If provided, user will be redirected to this URL with the token as a parameter.
   *
   * @generated from field: optional string redirect_url = 3;
   */
  redirectUrl?: string;

  /**
   * Optional time-to-live for the magic link in seconds.
   * If not provided, a default value will be used.
   *
   * @generated from field: optional int32 ttl_seconds = 4;
   */
  ttlSeconds?: number;
};

/**
 * Describes the message auth.v1.SendMagicLinkRequest.
 * Use `create(SendMagicLinkRequestSchema)` to create a new message.
 */
export const SendMagicLinkRequestSchema: GenMessage<SendMagicLinkRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_magic_link, 0);

/**
 * SendMagicLinkResponse indicates the magic link generation result.
 *
 * @generated from message auth.v1.SendMagicLinkResponse
 */
export type SendMagicLinkResponse = Message<"auth.v1.SendMagicLinkResponse"> & {
  /**
   * Indicates whether the magic link was successfully generated and sent.
   * Note: For security reasons, this may return true even if the email doesn't exist.
   *
   * @generated from field: auth.v1.SuccessResponse result = 1;
   */
  result?: SuccessResponse;

  /**
   * Optional expiration time in Unix timestamp format.
   *
   * @generated from field: optional int64 expires_at = 2;
   */
  expiresAt?: bigint;

  /**
   * Indicates whether a new user account was created.
   * Will be true for new registrations, false for existing users.
   *
   * @generated from field: optional bool is_new_user = 3;
   */
  isNewUser?: boolean;

  /**
   * User ID of the user.
   * Only provided for new user registrations.
   *
   * @generated from field: optional string user_id = 4;
   */
  userId?: string;
};

/**
 * Describes the message auth.v1.SendMagicLinkResponse.
 * Use `create(SendMagicLinkResponseSchema)` to create a new message.
 */
export const SendMagicLinkResponseSchema: GenMessage<SendMagicLinkResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_magic_link, 1);

/**
 * VerifyMagicLinkRequest contains the token for verification.
 *
 * @generated from message auth.v1.VerifyMagicLinkRequest
 */
export type VerifyMagicLinkRequest = Message<"auth.v1.VerifyMagicLinkRequest"> & {
  /**
   * Magic link token received via email.
   * Must not be empty.
   *
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message auth.v1.VerifyMagicLinkRequest.
 * Use `create(VerifyMagicLinkRequestSchema)` to create a new message.
 */
export const VerifyMagicLinkRequestSchema: GenMessage<VerifyMagicLinkRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_magic_link, 2);

/**
 * VerifyMagicLinkResponse contains the authentication result.
 *
 * @generated from message auth.v1.VerifyMagicLinkResponse
 */
export type VerifyMagicLinkResponse = Message<"auth.v1.VerifyMagicLinkResponse"> & {
  /**
   * Authentication data including tokens and user information.
   *
   * @generated from field: auth.v1.AuthResponse auth = 1;
   */
  auth?: AuthResponse;
};

/**
 * Describes the message auth.v1.VerifyMagicLinkResponse.
 * Use `create(VerifyMagicLinkResponseSchema)` to create a new message.
 */
export const VerifyMagicLinkResponseSchema: GenMessage<VerifyMagicLinkResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_magic_link, 3);

/**
 * AuthMagicLinkService provides magic link-based authentication operations.
 *
 * @generated from service auth.v1.AuthMagicLinkService
 */
export const AuthMagicLinkService: GenService<{
  /**
   * SendMagicLink initiates the magic link authentication process.
   * It generates a secure link and sends it to the user's email address.
   * This method handles both login and registration - if the user doesn't exist,
   * a new account will be created automatically.
   *
   * @generated from rpc auth.v1.AuthMagicLinkService.SendMagicLink
   */
  sendMagicLink: {
    methodKind: "unary";
    input: typeof SendMagicLinkRequestSchema;
    output: typeof SendMagicLinkResponseSchema;
  },
  /**
   * VerifyMagicLink authenticates a user using a magic link token.
   * It verifies the provided token and returns authentication tokens upon success.
   *
   * @generated from rpc auth.v1.AuthMagicLinkService.VerifyMagicLink
   */
  verifyMagicLink: {
    methodKind: "unary";
    input: typeof VerifyMagicLinkRequestSchema;
    output: typeof VerifyMagicLinkResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_auth_v1_magic_link, 0);

