// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file auth/v1/password.proto (package auth.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AuthResponse, SuccessResponse } from "./common_pb";
import { file_auth_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file auth/v1/password.proto.
 */
export const file_auth_v1_password: GenFile = /*@__PURE__*/
  fileDesc("ChZhdXRoL3YxL3Bhc3N3b3JkLnByb3RvEgdhdXRoLnYxIi8KDExvZ2luUmVxdWVzdBINCgVlbWFpbBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSI0Cg1Mb2dpblJlc3BvbnNlEiMKBGF1dGgYASABKAsyFS5hdXRoLnYxLkF1dGhSZXNwb25zZSJOCg9SZWdpc3RlclJlcXVlc3QSDQoFZW1haWwYASABKAkSEAoIcGFzc3dvcmQYAiABKAkSEQoEbmFtZRgDIAEoCUgAiAEBQgcKBV9uYW1lIjcKEFJlZ2lzdGVyUmVzcG9uc2USIwoEYXV0aBgBIAEoCzIVLmF1dGgudjEuQXV0aFJlc3BvbnNlIiYKFUZvcmdvdFBhc3N3b3JkUmVxdWVzdBINCgVlbWFpbBgBIAEoCSJCChZGb3Jnb3RQYXNzd29yZFJlc3BvbnNlEigKBnJlc3VsdBgBIAEoCzIYLmF1dGgudjEuU3VjY2Vzc1Jlc3BvbnNlIlYKFFJlc2V0UGFzc3dvcmRSZXF1ZXN0Eg0KBXRva2VuGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJEh0KFXBhc3N3b3JkX2NvbmZpcm1hdGlvbhgDIAEoCSJBChVSZXNldFBhc3N3b3JkUmVzcG9uc2USKAoGcmVzdWx0GAEgASgLMhguYXV0aC52MS5TdWNjZXNzUmVzcG9uc2UysQIKE0F1dGhQYXNzd29yZFNlcnZpY2USNgoFTG9naW4SFS5hdXRoLnYxLkxvZ2luUmVxdWVzdBoWLmF1dGgudjEuTG9naW5SZXNwb25zZRI/CghSZWdpc3RlchIYLmF1dGgudjEuUmVnaXN0ZXJSZXF1ZXN0GhkuYXV0aC52MS5SZWdpc3RlclJlc3BvbnNlElEKDkZvcmdvdFBhc3N3b3JkEh4uYXV0aC52MS5Gb3Jnb3RQYXNzd29yZFJlcXVlc3QaHy5hdXRoLnYxLkZvcmdvdFBhc3N3b3JkUmVzcG9uc2USTgoNUmVzZXRQYXNzd29yZBIdLmF1dGgudjEuUmVzZXRQYXNzd29yZFJlcXVlc3QaHi5hdXRoLnYxLlJlc2V0UGFzc3dvcmRSZXNwb25zZUIyWjBnaXRodWIuY29tL2F1dGhodWJkZXYvYXBpcy9nZW4vZ28vYXV0aC92MTthdXRodjFiBnByb3RvMw", [file_auth_v1_common]);

/**
 * LoginRequest contains credentials for authentication.
 *
 * @generated from message auth.v1.LoginRequest
 */
export type LoginRequest = Message<"auth.v1.LoginRequest"> & {
  /**
   * Email address of the user.
   * Must be a valid email format between 5 and 255 characters.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * User password.
   * Must be between 6 and 100 characters.
   *
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * Describes the message auth.v1.LoginRequest.
 * Use `create(LoginRequestSchema)` to create a new message.
 */
export const LoginRequestSchema: GenMessage<LoginRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 0);

/**
 * LoginResponse contains the authentication result.
 *
 * @generated from message auth.v1.LoginResponse
 */
export type LoginResponse = Message<"auth.v1.LoginResponse"> & {
  /**
   * Authentication data including tokens and user information.
   *
   * @generated from field: auth.v1.AuthResponse auth = 1;
   */
  auth?: AuthResponse;
};

/**
 * Describes the message auth.v1.LoginResponse.
 * Use `create(LoginResponseSchema)` to create a new message.
 */
export const LoginResponseSchema: GenMessage<LoginResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 1);

/**
 * RegisterRequest contains information for creating a new user account.
 *
 * @generated from message auth.v1.RegisterRequest
 */
export type RegisterRequest = Message<"auth.v1.RegisterRequest"> & {
  /**
   * Email address of the user.
   * Must be a valid email format between 5 and 255 characters.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * User password.
   * Must be between 6 and 100 characters.
   *
   * @generated from field: string password = 2;
   */
  password: string;

  /**
   * Optional user name.
   * If provided, must be between 2 and 100 characters.
   *
   * @generated from field: optional string name = 3;
   */
  name?: string;
};

/**
 * Describes the message auth.v1.RegisterRequest.
 * Use `create(RegisterRequestSchema)` to create a new message.
 */
export const RegisterRequestSchema: GenMessage<RegisterRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 2);

/**
 * RegisterResponse contains the registration result.
 *
 * @generated from message auth.v1.RegisterResponse
 */
export type RegisterResponse = Message<"auth.v1.RegisterResponse"> & {
  /**
   * Authentication data including tokens and user information.
   *
   * @generated from field: auth.v1.AuthResponse auth = 1;
   */
  auth?: AuthResponse;
};

/**
 * Describes the message auth.v1.RegisterResponse.
 * Use `create(RegisterResponseSchema)` to create a new message.
 */
export const RegisterResponseSchema: GenMessage<RegisterResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 3);

/**
 * ForgotPasswordRequest initiates password recovery.
 *
 * @generated from message auth.v1.ForgotPasswordRequest
 */
export type ForgotPasswordRequest = Message<"auth.v1.ForgotPasswordRequest"> & {
  /**
   * Email address of the user requesting password recovery.
   * Must be a valid email format between 5 and 255 characters.
   *
   * @generated from field: string email = 1;
   */
  email: string;
};

/**
 * Describes the message auth.v1.ForgotPasswordRequest.
 * Use `create(ForgotPasswordRequestSchema)` to create a new message.
 */
export const ForgotPasswordRequestSchema: GenMessage<ForgotPasswordRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 4);

/**
 * ForgotPasswordResponse indicates the password recovery process has started.
 *
 * @generated from message auth.v1.ForgotPasswordResponse
 */
export type ForgotPasswordResponse = Message<"auth.v1.ForgotPasswordResponse"> & {
  /**
   * Indicates whether the password recovery request was successfully processed.
   * Note: For security reasons, this may return true even if the email doesn't exist.
   *
   * @generated from field: auth.v1.SuccessResponse result = 1;
   */
  result?: SuccessResponse;
};

/**
 * Describes the message auth.v1.ForgotPasswordResponse.
 * Use `create(ForgotPasswordResponseSchema)` to create a new message.
 */
export const ForgotPasswordResponseSchema: GenMessage<ForgotPasswordResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 5);

/**
 * ResetPasswordRequest contains information for resetting a password.
 *
 * @generated from message auth.v1.ResetPasswordRequest
 */
export type ResetPasswordRequest = Message<"auth.v1.ResetPasswordRequest"> & {
  /**
   * Password reset token received via email.
   * Must not be empty.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * New password to set.
   * Must be between 6 and 100 characters.
   *
   * @generated from field: string password = 2;
   */
  password: string;

  /**
   * New password confirmation.
   * Must match the password field and be between 6 and 100 characters.
   *
   * @generated from field: string password_confirmation = 3;
   */
  passwordConfirmation: string;
};

/**
 * Describes the message auth.v1.ResetPasswordRequest.
 * Use `create(ResetPasswordRequestSchema)` to create a new message.
 */
export const ResetPasswordRequestSchema: GenMessage<ResetPasswordRequest> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 6);

/**
 * ResetPasswordResponse indicates the result of the password reset.
 *
 * @generated from message auth.v1.ResetPasswordResponse
 */
export type ResetPasswordResponse = Message<"auth.v1.ResetPasswordResponse"> & {
  /**
   * Indicates whether the password was successfully reset.
   *
   * @generated from field: auth.v1.SuccessResponse result = 1;
   */
  result?: SuccessResponse;
};

/**
 * Describes the message auth.v1.ResetPasswordResponse.
 * Use `create(ResetPasswordResponseSchema)` to create a new message.
 */
export const ResetPasswordResponseSchema: GenMessage<ResetPasswordResponse> = /*@__PURE__*/
  messageDesc(file_auth_v1_password, 7);

/**
 * AuthPasswordService provides password-based authentication operations.
 *
 * @generated from service auth.v1.AuthPasswordService
 */
export const AuthPasswordService: GenService<{
  /**
   * Login authenticates a user using email and password.
   * It verifies the provided credentials and returns authentication tokens upon success.
   *
   * @generated from rpc auth.v1.AuthPasswordService.Login
   */
  login: {
    methodKind: "unary";
    input: typeof LoginRequestSchema;
    output: typeof LoginResponseSchema;
  },
  /**
   * Register creates a new user account with email and password.
   * It performs validation on the provided data and creates a new user account.
   * Returns authentication tokens upon successful registration.
   *
   * @generated from rpc auth.v1.AuthPasswordService.Register
   */
  register: {
    methodKind: "unary";
    input: typeof RegisterRequestSchema;
    output: typeof RegisterResponseSchema;
  },
  /**
   * ForgotPassword initiates the password recovery process.
   * It sends a password reset link to the user's email address.
   *
   * @generated from rpc auth.v1.AuthPasswordService.ForgotPassword
   */
  forgotPassword: {
    methodKind: "unary";
    input: typeof ForgotPasswordRequestSchema;
    output: typeof ForgotPasswordResponseSchema;
  },
  /**
   * ResetPassword changes a user's password using a reset token.
   * It validates the token and updates the user's password.
   *
   * @generated from rpc auth.v1.AuthPasswordService.ResetPassword
   */
  resetPassword: {
    methodKind: "unary";
    input: typeof ResetPasswordRequestSchema;
    output: typeof ResetPasswordResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_auth_v1_password, 0);

