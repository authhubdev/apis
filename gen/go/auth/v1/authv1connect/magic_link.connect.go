// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/magic_link.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/authhubdev/apis/gen/go/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthMagicLinkServiceName is the fully-qualified name of the AuthMagicLinkService service.
	AuthMagicLinkServiceName = "auth.v1.AuthMagicLinkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthMagicLinkServiceSendMagicLinkProcedure is the fully-qualified name of the
	// AuthMagicLinkService's SendMagicLink RPC.
	AuthMagicLinkServiceSendMagicLinkProcedure = "/auth.v1.AuthMagicLinkService/SendMagicLink"
	// AuthMagicLinkServiceVerifyMagicLinkProcedure is the fully-qualified name of the
	// AuthMagicLinkService's VerifyMagicLink RPC.
	AuthMagicLinkServiceVerifyMagicLinkProcedure = "/auth.v1.AuthMagicLinkService/VerifyMagicLink"
)

// AuthMagicLinkServiceClient is a client for the auth.v1.AuthMagicLinkService service.
type AuthMagicLinkServiceClient interface {
	// SendMagicLink initiates the magic link authentication process.
	// It generates a secure link and sends it to the user's email address.
	// This method handles both login and registration - if the user doesn't exist,
	// a new account will be created automatically.
	SendMagicLink(context.Context, *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error)
	// VerifyMagicLink authenticates a user using a magic link token.
	// It verifies the provided token and returns authentication tokens upon success.
	VerifyMagicLink(context.Context, *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error)
}

// NewAuthMagicLinkServiceClient constructs a client for the auth.v1.AuthMagicLinkService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthMagicLinkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthMagicLinkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authMagicLinkServiceMethods := v1.File_auth_v1_magic_link_proto.Services().ByName("AuthMagicLinkService").Methods()
	return &authMagicLinkServiceClient{
		sendMagicLink: connect.NewClient[v1.SendMagicLinkRequest, v1.SendMagicLinkResponse](
			httpClient,
			baseURL+AuthMagicLinkServiceSendMagicLinkProcedure,
			connect.WithSchema(authMagicLinkServiceMethods.ByName("SendMagicLink")),
			connect.WithClientOptions(opts...),
		),
		verifyMagicLink: connect.NewClient[v1.VerifyMagicLinkRequest, v1.VerifyMagicLinkResponse](
			httpClient,
			baseURL+AuthMagicLinkServiceVerifyMagicLinkProcedure,
			connect.WithSchema(authMagicLinkServiceMethods.ByName("VerifyMagicLink")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authMagicLinkServiceClient implements AuthMagicLinkServiceClient.
type authMagicLinkServiceClient struct {
	sendMagicLink   *connect.Client[v1.SendMagicLinkRequest, v1.SendMagicLinkResponse]
	verifyMagicLink *connect.Client[v1.VerifyMagicLinkRequest, v1.VerifyMagicLinkResponse]
}

// SendMagicLink calls auth.v1.AuthMagicLinkService.SendMagicLink.
func (c *authMagicLinkServiceClient) SendMagicLink(ctx context.Context, req *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error) {
	return c.sendMagicLink.CallUnary(ctx, req)
}

// VerifyMagicLink calls auth.v1.AuthMagicLinkService.VerifyMagicLink.
func (c *authMagicLinkServiceClient) VerifyMagicLink(ctx context.Context, req *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error) {
	return c.verifyMagicLink.CallUnary(ctx, req)
}

// AuthMagicLinkServiceHandler is an implementation of the auth.v1.AuthMagicLinkService service.
type AuthMagicLinkServiceHandler interface {
	// SendMagicLink initiates the magic link authentication process.
	// It generates a secure link and sends it to the user's email address.
	// This method handles both login and registration - if the user doesn't exist,
	// a new account will be created automatically.
	SendMagicLink(context.Context, *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error)
	// VerifyMagicLink authenticates a user using a magic link token.
	// It verifies the provided token and returns authentication tokens upon success.
	VerifyMagicLink(context.Context, *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error)
}

// NewAuthMagicLinkServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthMagicLinkServiceHandler(svc AuthMagicLinkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authMagicLinkServiceMethods := v1.File_auth_v1_magic_link_proto.Services().ByName("AuthMagicLinkService").Methods()
	authMagicLinkServiceSendMagicLinkHandler := connect.NewUnaryHandler(
		AuthMagicLinkServiceSendMagicLinkProcedure,
		svc.SendMagicLink,
		connect.WithSchema(authMagicLinkServiceMethods.ByName("SendMagicLink")),
		connect.WithHandlerOptions(opts...),
	)
	authMagicLinkServiceVerifyMagicLinkHandler := connect.NewUnaryHandler(
		AuthMagicLinkServiceVerifyMagicLinkProcedure,
		svc.VerifyMagicLink,
		connect.WithSchema(authMagicLinkServiceMethods.ByName("VerifyMagicLink")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthMagicLinkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthMagicLinkServiceSendMagicLinkProcedure:
			authMagicLinkServiceSendMagicLinkHandler.ServeHTTP(w, r)
		case AuthMagicLinkServiceVerifyMagicLinkProcedure:
			authMagicLinkServiceVerifyMagicLinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthMagicLinkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthMagicLinkServiceHandler struct{}

func (UnimplementedAuthMagicLinkServiceHandler) SendMagicLink(context.Context, *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthMagicLinkService.SendMagicLink is not implemented"))
}

func (UnimplementedAuthMagicLinkServiceHandler) VerifyMagicLink(context.Context, *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthMagicLinkService.VerifyMagicLink is not implemented"))
}
