// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/magic_link.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/authhubdev/apis/gen/go/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MagicLinkServiceName is the fully-qualified name of the MagicLinkService service.
	MagicLinkServiceName = "auth.v1.MagicLinkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MagicLinkServiceSendMagicLinkProcedure is the fully-qualified name of the MagicLinkService's
	// SendMagicLink RPC.
	MagicLinkServiceSendMagicLinkProcedure = "/auth.v1.MagicLinkService/SendMagicLink"
	// MagicLinkServiceVerifyMagicLinkProcedure is the fully-qualified name of the MagicLinkService's
	// VerifyMagicLink RPC.
	MagicLinkServiceVerifyMagicLinkProcedure = "/auth.v1.MagicLinkService/VerifyMagicLink"
)

// MagicLinkServiceClient is a client for the auth.v1.MagicLinkService service.
type MagicLinkServiceClient interface {
	// SendMagicLink sends a magic link to the specified email.
	// If the email doesn't exist, a new account will be created.
	SendMagicLink(context.Context, *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error)
	// VerifyMagicLink validates the magic link OTP and returns auth tokens.
	VerifyMagicLink(context.Context, *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error)
}

// NewMagicLinkServiceClient constructs a client for the auth.v1.MagicLinkService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMagicLinkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MagicLinkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	magicLinkServiceMethods := v1.File_auth_v1_magic_link_proto.Services().ByName("MagicLinkService").Methods()
	return &magicLinkServiceClient{
		sendMagicLink: connect.NewClient[v1.SendMagicLinkRequest, v1.SendMagicLinkResponse](
			httpClient,
			baseURL+MagicLinkServiceSendMagicLinkProcedure,
			connect.WithSchema(magicLinkServiceMethods.ByName("SendMagicLink")),
			connect.WithClientOptions(opts...),
		),
		verifyMagicLink: connect.NewClient[v1.VerifyMagicLinkRequest, v1.VerifyMagicLinkResponse](
			httpClient,
			baseURL+MagicLinkServiceVerifyMagicLinkProcedure,
			connect.WithSchema(magicLinkServiceMethods.ByName("VerifyMagicLink")),
			connect.WithClientOptions(opts...),
		),
	}
}

// magicLinkServiceClient implements MagicLinkServiceClient.
type magicLinkServiceClient struct {
	sendMagicLink   *connect.Client[v1.SendMagicLinkRequest, v1.SendMagicLinkResponse]
	verifyMagicLink *connect.Client[v1.VerifyMagicLinkRequest, v1.VerifyMagicLinkResponse]
}

// SendMagicLink calls auth.v1.MagicLinkService.SendMagicLink.
func (c *magicLinkServiceClient) SendMagicLink(ctx context.Context, req *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error) {
	return c.sendMagicLink.CallUnary(ctx, req)
}

// VerifyMagicLink calls auth.v1.MagicLinkService.VerifyMagicLink.
func (c *magicLinkServiceClient) VerifyMagicLink(ctx context.Context, req *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error) {
	return c.verifyMagicLink.CallUnary(ctx, req)
}

// MagicLinkServiceHandler is an implementation of the auth.v1.MagicLinkService service.
type MagicLinkServiceHandler interface {
	// SendMagicLink sends a magic link to the specified email.
	// If the email doesn't exist, a new account will be created.
	SendMagicLink(context.Context, *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error)
	// VerifyMagicLink validates the magic link OTP and returns auth tokens.
	VerifyMagicLink(context.Context, *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error)
}

// NewMagicLinkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMagicLinkServiceHandler(svc MagicLinkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	magicLinkServiceMethods := v1.File_auth_v1_magic_link_proto.Services().ByName("MagicLinkService").Methods()
	magicLinkServiceSendMagicLinkHandler := connect.NewUnaryHandler(
		MagicLinkServiceSendMagicLinkProcedure,
		svc.SendMagicLink,
		connect.WithSchema(magicLinkServiceMethods.ByName("SendMagicLink")),
		connect.WithHandlerOptions(opts...),
	)
	magicLinkServiceVerifyMagicLinkHandler := connect.NewUnaryHandler(
		MagicLinkServiceVerifyMagicLinkProcedure,
		svc.VerifyMagicLink,
		connect.WithSchema(magicLinkServiceMethods.ByName("VerifyMagicLink")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.MagicLinkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MagicLinkServiceSendMagicLinkProcedure:
			magicLinkServiceSendMagicLinkHandler.ServeHTTP(w, r)
		case MagicLinkServiceVerifyMagicLinkProcedure:
			magicLinkServiceVerifyMagicLinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMagicLinkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMagicLinkServiceHandler struct{}

func (UnimplementedMagicLinkServiceHandler) SendMagicLink(context.Context, *connect.Request[v1.SendMagicLinkRequest]) (*connect.Response[v1.SendMagicLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.MagicLinkService.SendMagicLink is not implemented"))
}

func (UnimplementedMagicLinkServiceHandler) VerifyMagicLink(context.Context, *connect.Request[v1.VerifyMagicLinkRequest]) (*connect.Response[v1.VerifyMagicLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.MagicLinkService.VerifyMagicLink is not implemented"))
}
