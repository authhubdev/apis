// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/session.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/authhubdev/apis/gen/go/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthSessionServiceName is the fully-qualified name of the AuthSessionService service.
	AuthSessionServiceName = "auth.v1.AuthSessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthSessionServiceGetSessionProcedure is the fully-qualified name of the AuthSessionService's
	// GetSession RPC.
	AuthSessionServiceGetSessionProcedure = "/auth.v1.AuthSessionService/GetSession"
	// AuthSessionServiceRefreshSessionProcedure is the fully-qualified name of the AuthSessionService's
	// RefreshSession RPC.
	AuthSessionServiceRefreshSessionProcedure = "/auth.v1.AuthSessionService/RefreshSession"
	// AuthSessionServiceRevokeSessionProcedure is the fully-qualified name of the AuthSessionService's
	// RevokeSession RPC.
	AuthSessionServiceRevokeSessionProcedure = "/auth.v1.AuthSessionService/RevokeSession"
	// AuthSessionServiceListSessionsProcedure is the fully-qualified name of the AuthSessionService's
	// ListSessions RPC.
	AuthSessionServiceListSessionsProcedure = "/auth.v1.AuthSessionService/ListSessions"
	// AuthSessionServiceRevokeAllSessionsProcedure is the fully-qualified name of the
	// AuthSessionService's RevokeAllSessions RPC.
	AuthSessionServiceRevokeAllSessionsProcedure = "/auth.v1.AuthSessionService/RevokeAllSessions"
)

// AuthSessionServiceClient is a client for the auth.v1.AuthSessionService service.
type AuthSessionServiceClient interface {
	// GetSession retrieves information about the current authenticated session.
	// It validates the provided token and returns session details.
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	// RefreshSession generates new authentication tokens using a refresh token.
	// It validates the refresh token and issues a new access token.
	RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error)
	// RevokeSession invalidates a specific session.
	// This can be used when a user logs out from a specific device.
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	// ListSessions returns all active sessions for a user.
	// This can be used to show users all devices where they're currently logged in.
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	// RevokeAllSessions invalidates all sessions for a user.
	// This can be used for security purposes or when a user wants to log out from all devices.
	RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error)
}

// NewAuthSessionServiceClient constructs a client for the auth.v1.AuthSessionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthSessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authSessionServiceMethods := v1.File_auth_v1_session_proto.Services().ByName("AuthSessionService").Methods()
	return &authSessionServiceClient{
		getSession: connect.NewClient[v1.GetSessionRequest, v1.GetSessionResponse](
			httpClient,
			baseURL+AuthSessionServiceGetSessionProcedure,
			connect.WithSchema(authSessionServiceMethods.ByName("GetSession")),
			connect.WithClientOptions(opts...),
		),
		refreshSession: connect.NewClient[v1.RefreshSessionRequest, v1.RefreshSessionResponse](
			httpClient,
			baseURL+AuthSessionServiceRefreshSessionProcedure,
			connect.WithSchema(authSessionServiceMethods.ByName("RefreshSession")),
			connect.WithClientOptions(opts...),
		),
		revokeSession: connect.NewClient[v1.RevokeSessionRequest, v1.RevokeSessionResponse](
			httpClient,
			baseURL+AuthSessionServiceRevokeSessionProcedure,
			connect.WithSchema(authSessionServiceMethods.ByName("RevokeSession")),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+AuthSessionServiceListSessionsProcedure,
			connect.WithSchema(authSessionServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		revokeAllSessions: connect.NewClient[v1.RevokeAllSessionsRequest, v1.RevokeAllSessionsResponse](
			httpClient,
			baseURL+AuthSessionServiceRevokeAllSessionsProcedure,
			connect.WithSchema(authSessionServiceMethods.ByName("RevokeAllSessions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authSessionServiceClient implements AuthSessionServiceClient.
type authSessionServiceClient struct {
	getSession        *connect.Client[v1.GetSessionRequest, v1.GetSessionResponse]
	refreshSession    *connect.Client[v1.RefreshSessionRequest, v1.RefreshSessionResponse]
	revokeSession     *connect.Client[v1.RevokeSessionRequest, v1.RevokeSessionResponse]
	listSessions      *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	revokeAllSessions *connect.Client[v1.RevokeAllSessionsRequest, v1.RevokeAllSessionsResponse]
}

// GetSession calls auth.v1.AuthSessionService.GetSession.
func (c *authSessionServiceClient) GetSession(ctx context.Context, req *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// RefreshSession calls auth.v1.AuthSessionService.RefreshSession.
func (c *authSessionServiceClient) RefreshSession(ctx context.Context, req *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error) {
	return c.refreshSession.CallUnary(ctx, req)
}

// RevokeSession calls auth.v1.AuthSessionService.RevokeSession.
func (c *authSessionServiceClient) RevokeSession(ctx context.Context, req *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return c.revokeSession.CallUnary(ctx, req)
}

// ListSessions calls auth.v1.AuthSessionService.ListSessions.
func (c *authSessionServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// RevokeAllSessions calls auth.v1.AuthSessionService.RevokeAllSessions.
func (c *authSessionServiceClient) RevokeAllSessions(ctx context.Context, req *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error) {
	return c.revokeAllSessions.CallUnary(ctx, req)
}

// AuthSessionServiceHandler is an implementation of the auth.v1.AuthSessionService service.
type AuthSessionServiceHandler interface {
	// GetSession retrieves information about the current authenticated session.
	// It validates the provided token and returns session details.
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	// RefreshSession generates new authentication tokens using a refresh token.
	// It validates the refresh token and issues a new access token.
	RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error)
	// RevokeSession invalidates a specific session.
	// This can be used when a user logs out from a specific device.
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	// ListSessions returns all active sessions for a user.
	// This can be used to show users all devices where they're currently logged in.
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	// RevokeAllSessions invalidates all sessions for a user.
	// This can be used for security purposes or when a user wants to log out from all devices.
	RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error)
}

// NewAuthSessionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthSessionServiceHandler(svc AuthSessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authSessionServiceMethods := v1.File_auth_v1_session_proto.Services().ByName("AuthSessionService").Methods()
	authSessionServiceGetSessionHandler := connect.NewUnaryHandler(
		AuthSessionServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(authSessionServiceMethods.ByName("GetSession")),
		connect.WithHandlerOptions(opts...),
	)
	authSessionServiceRefreshSessionHandler := connect.NewUnaryHandler(
		AuthSessionServiceRefreshSessionProcedure,
		svc.RefreshSession,
		connect.WithSchema(authSessionServiceMethods.ByName("RefreshSession")),
		connect.WithHandlerOptions(opts...),
	)
	authSessionServiceRevokeSessionHandler := connect.NewUnaryHandler(
		AuthSessionServiceRevokeSessionProcedure,
		svc.RevokeSession,
		connect.WithSchema(authSessionServiceMethods.ByName("RevokeSession")),
		connect.WithHandlerOptions(opts...),
	)
	authSessionServiceListSessionsHandler := connect.NewUnaryHandler(
		AuthSessionServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(authSessionServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	authSessionServiceRevokeAllSessionsHandler := connect.NewUnaryHandler(
		AuthSessionServiceRevokeAllSessionsProcedure,
		svc.RevokeAllSessions,
		connect.WithSchema(authSessionServiceMethods.ByName("RevokeAllSessions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthSessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthSessionServiceGetSessionProcedure:
			authSessionServiceGetSessionHandler.ServeHTTP(w, r)
		case AuthSessionServiceRefreshSessionProcedure:
			authSessionServiceRefreshSessionHandler.ServeHTTP(w, r)
		case AuthSessionServiceRevokeSessionProcedure:
			authSessionServiceRevokeSessionHandler.ServeHTTP(w, r)
		case AuthSessionServiceListSessionsProcedure:
			authSessionServiceListSessionsHandler.ServeHTTP(w, r)
		case AuthSessionServiceRevokeAllSessionsProcedure:
			authSessionServiceRevokeAllSessionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthSessionServiceHandler struct{}

func (UnimplementedAuthSessionServiceHandler) GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthSessionService.GetSession is not implemented"))
}

func (UnimplementedAuthSessionServiceHandler) RefreshSession(context.Context, *connect.Request[v1.RefreshSessionRequest]) (*connect.Response[v1.RefreshSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthSessionService.RefreshSession is not implemented"))
}

func (UnimplementedAuthSessionServiceHandler) RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthSessionService.RevokeSession is not implemented"))
}

func (UnimplementedAuthSessionServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthSessionService.ListSessions is not implemented"))
}

func (UnimplementedAuthSessionServiceHandler) RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthSessionService.RevokeAllSessions is not implemented"))
}
