// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/session.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/authhubdev/apis/gen/go/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "auth.v1.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceGetSessionProcedure is the fully-qualified name of the SessionService's GetSession
	// RPC.
	SessionServiceGetSessionProcedure = "/auth.v1.SessionService/GetSession"
	// SessionServiceListSessionsProcedure is the fully-qualified name of the SessionService's
	// ListSessions RPC.
	SessionServiceListSessionsProcedure = "/auth.v1.SessionService/ListSessions"
	// SessionServiceRevokeSessionProcedure is the fully-qualified name of the SessionService's
	// RevokeSession RPC.
	SessionServiceRevokeSessionProcedure = "/auth.v1.SessionService/RevokeSession"
	// SessionServiceRevokeAllSessionsProcedure is the fully-qualified name of the SessionService's
	// RevokeAllSessions RPC.
	SessionServiceRevokeAllSessionsProcedure = "/auth.v1.SessionService/RevokeAllSessions"
	// SessionServiceRevokeOtherSessionsProcedure is the fully-qualified name of the SessionService's
	// RevokeOtherSessions RPC.
	SessionServiceRevokeOtherSessionsProcedure = "/auth.v1.SessionService/RevokeOtherSessions"
	// SessionServiceRefreshTokenProcedure is the fully-qualified name of the SessionService's
	// RefreshToken RPC.
	SessionServiceRefreshTokenProcedure = "/auth.v1.SessionService/RefreshToken"
)

// SessionServiceClient is a client for the auth.v1.SessionService service.
type SessionServiceClient interface {
	// GetSession retrieves details about the current session.
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	// ListSessions retrieves all active sessions for the current user.
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	// RevokeSession terminates a specific session by its ID.
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	// RevokeAllSessions terminates all sessions for the current user.
	RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error)
	// RevokeOtherSessions terminates all sessions except the current one.
	RevokeOtherSessions(context.Context, *connect.Request[v1.RevokeOtherSessionsRequest]) (*connect.Response[v1.RevokeOtherSessionsResponse], error)
	// RefreshToken refreshes an expired token using a refresh token.
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewSessionServiceClient constructs a client for the auth.v1.SessionService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sessionServiceMethods := v1.File_auth_v1_session_proto.Services().ByName("SessionService").Methods()
	return &sessionServiceClient{
		getSession: connect.NewClient[v1.GetSessionRequest, v1.GetSessionResponse](
			httpClient,
			baseURL+SessionServiceGetSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("GetSession")),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+SessionServiceListSessionsProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("ListSessions")),
			connect.WithClientOptions(opts...),
		),
		revokeSession: connect.NewClient[v1.RevokeSessionRequest, v1.RevokeSessionResponse](
			httpClient,
			baseURL+SessionServiceRevokeSessionProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RevokeSession")),
			connect.WithClientOptions(opts...),
		),
		revokeAllSessions: connect.NewClient[v1.RevokeAllSessionsRequest, v1.RevokeAllSessionsResponse](
			httpClient,
			baseURL+SessionServiceRevokeAllSessionsProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RevokeAllSessions")),
			connect.WithClientOptions(opts...),
		),
		revokeOtherSessions: connect.NewClient[v1.RevokeOtherSessionsRequest, v1.RevokeOtherSessionsResponse](
			httpClient,
			baseURL+SessionServiceRevokeOtherSessionsProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RevokeOtherSessions")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+SessionServiceRefreshTokenProcedure,
			connect.WithSchema(sessionServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	getSession          *connect.Client[v1.GetSessionRequest, v1.GetSessionResponse]
	listSessions        *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	revokeSession       *connect.Client[v1.RevokeSessionRequest, v1.RevokeSessionResponse]
	revokeAllSessions   *connect.Client[v1.RevokeAllSessionsRequest, v1.RevokeAllSessionsResponse]
	revokeOtherSessions *connect.Client[v1.RevokeOtherSessionsRequest, v1.RevokeOtherSessionsResponse]
	refreshToken        *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
}

// GetSession calls auth.v1.SessionService.GetSession.
func (c *sessionServiceClient) GetSession(ctx context.Context, req *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// ListSessions calls auth.v1.SessionService.ListSessions.
func (c *sessionServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// RevokeSession calls auth.v1.SessionService.RevokeSession.
func (c *sessionServiceClient) RevokeSession(ctx context.Context, req *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return c.revokeSession.CallUnary(ctx, req)
}

// RevokeAllSessions calls auth.v1.SessionService.RevokeAllSessions.
func (c *sessionServiceClient) RevokeAllSessions(ctx context.Context, req *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error) {
	return c.revokeAllSessions.CallUnary(ctx, req)
}

// RevokeOtherSessions calls auth.v1.SessionService.RevokeOtherSessions.
func (c *sessionServiceClient) RevokeOtherSessions(ctx context.Context, req *connect.Request[v1.RevokeOtherSessionsRequest]) (*connect.Response[v1.RevokeOtherSessionsResponse], error) {
	return c.revokeOtherSessions.CallUnary(ctx, req)
}

// RefreshToken calls auth.v1.SessionService.RefreshToken.
func (c *sessionServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the auth.v1.SessionService service.
type SessionServiceHandler interface {
	// GetSession retrieves details about the current session.
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	// ListSessions retrieves all active sessions for the current user.
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	// RevokeSession terminates a specific session by its ID.
	RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error)
	// RevokeAllSessions terminates all sessions for the current user.
	RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error)
	// RevokeOtherSessions terminates all sessions except the current one.
	RevokeOtherSessions(context.Context, *connect.Request[v1.RevokeOtherSessionsRequest]) (*connect.Response[v1.RevokeOtherSessionsResponse], error)
	// RefreshToken refreshes an expired token using a refresh token.
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceMethods := v1.File_auth_v1_session_proto.Services().ByName("SessionService").Methods()
	sessionServiceGetSessionHandler := connect.NewUnaryHandler(
		SessionServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(sessionServiceMethods.ByName("GetSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceListSessionsHandler := connect.NewUnaryHandler(
		SessionServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(sessionServiceMethods.ByName("ListSessions")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRevokeSessionHandler := connect.NewUnaryHandler(
		SessionServiceRevokeSessionProcedure,
		svc.RevokeSession,
		connect.WithSchema(sessionServiceMethods.ByName("RevokeSession")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRevokeAllSessionsHandler := connect.NewUnaryHandler(
		SessionServiceRevokeAllSessionsProcedure,
		svc.RevokeAllSessions,
		connect.WithSchema(sessionServiceMethods.ByName("RevokeAllSessions")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRevokeOtherSessionsHandler := connect.NewUnaryHandler(
		SessionServiceRevokeOtherSessionsProcedure,
		svc.RevokeOtherSessions,
		connect.WithSchema(sessionServiceMethods.ByName("RevokeOtherSessions")),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRefreshTokenHandler := connect.NewUnaryHandler(
		SessionServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(sessionServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceGetSessionProcedure:
			sessionServiceGetSessionHandler.ServeHTTP(w, r)
		case SessionServiceListSessionsProcedure:
			sessionServiceListSessionsHandler.ServeHTTP(w, r)
		case SessionServiceRevokeSessionProcedure:
			sessionServiceRevokeSessionHandler.ServeHTTP(w, r)
		case SessionServiceRevokeAllSessionsProcedure:
			sessionServiceRevokeAllSessionsHandler.ServeHTTP(w, r)
		case SessionServiceRevokeOtherSessionsProcedure:
			sessionServiceRevokeOtherSessionsHandler.ServeHTTP(w, r)
		case SessionServiceRefreshTokenProcedure:
			sessionServiceRefreshTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.GetSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.ListSessions is not implemented"))
}

func (UnimplementedSessionServiceHandler) RevokeSession(context.Context, *connect.Request[v1.RevokeSessionRequest]) (*connect.Response[v1.RevokeSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.RevokeSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) RevokeAllSessions(context.Context, *connect.Request[v1.RevokeAllSessionsRequest]) (*connect.Response[v1.RevokeAllSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.RevokeAllSessions is not implemented"))
}

func (UnimplementedSessionServiceHandler) RevokeOtherSessions(context.Context, *connect.Request[v1.RevokeOtherSessionsRequest]) (*connect.Response[v1.RevokeOtherSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.RevokeOtherSessions is not implemented"))
}

func (UnimplementedSessionServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.RefreshToken is not implemented"))
}
