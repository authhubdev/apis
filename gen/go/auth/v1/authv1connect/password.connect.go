// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/password.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/authhubdev/apis/gen/go/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthPasswordServiceName is the fully-qualified name of the AuthPasswordService service.
	AuthPasswordServiceName = "auth.v1.AuthPasswordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthPasswordServiceLoginProcedure is the fully-qualified name of the AuthPasswordService's Login
	// RPC.
	AuthPasswordServiceLoginProcedure = "/auth.v1.AuthPasswordService/Login"
	// AuthPasswordServiceRegisterProcedure is the fully-qualified name of the AuthPasswordService's
	// Register RPC.
	AuthPasswordServiceRegisterProcedure = "/auth.v1.AuthPasswordService/Register"
	// AuthPasswordServiceForgotPasswordProcedure is the fully-qualified name of the
	// AuthPasswordService's ForgotPassword RPC.
	AuthPasswordServiceForgotPasswordProcedure = "/auth.v1.AuthPasswordService/ForgotPassword"
	// AuthPasswordServiceResetPasswordProcedure is the fully-qualified name of the
	// AuthPasswordService's ResetPassword RPC.
	AuthPasswordServiceResetPasswordProcedure = "/auth.v1.AuthPasswordService/ResetPassword"
)

// AuthPasswordServiceClient is a client for the auth.v1.AuthPasswordService service.
type AuthPasswordServiceClient interface {
	// Login authenticates a user using email and password.
	// It verifies the provided credentials and returns authentication tokens upon success.
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Register creates a new user account with email and password.
	// It performs validation on the provided data and creates a new user account.
	// Returns authentication tokens upon successful registration.
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// ForgotPassword initiates the password recovery process.
	// It sends a password reset link to the user's email address.
	ForgotPassword(context.Context, *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error)
	// ResetPassword changes a user's password using a reset token.
	// It validates the token and updates the user's password.
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
}

// NewAuthPasswordServiceClient constructs a client for the auth.v1.AuthPasswordService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthPasswordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthPasswordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authPasswordServiceMethods := v1.File_auth_v1_password_proto.Services().ByName("AuthPasswordService").Methods()
	return &authPasswordServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthPasswordServiceLoginProcedure,
			connect.WithSchema(authPasswordServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+AuthPasswordServiceRegisterProcedure,
			connect.WithSchema(authPasswordServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		forgotPassword: connect.NewClient[v1.ForgotPasswordRequest, v1.ForgotPasswordResponse](
			httpClient,
			baseURL+AuthPasswordServiceForgotPasswordProcedure,
			connect.WithSchema(authPasswordServiceMethods.ByName("ForgotPassword")),
			connect.WithClientOptions(opts...),
		),
		resetPassword: connect.NewClient[v1.ResetPasswordRequest, v1.ResetPasswordResponse](
			httpClient,
			baseURL+AuthPasswordServiceResetPasswordProcedure,
			connect.WithSchema(authPasswordServiceMethods.ByName("ResetPassword")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authPasswordServiceClient implements AuthPasswordServiceClient.
type authPasswordServiceClient struct {
	login          *connect.Client[v1.LoginRequest, v1.LoginResponse]
	register       *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	forgotPassword *connect.Client[v1.ForgotPasswordRequest, v1.ForgotPasswordResponse]
	resetPassword  *connect.Client[v1.ResetPasswordRequest, v1.ResetPasswordResponse]
}

// Login calls auth.v1.AuthPasswordService.Login.
func (c *authPasswordServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls auth.v1.AuthPasswordService.Register.
func (c *authPasswordServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ForgotPassword calls auth.v1.AuthPasswordService.ForgotPassword.
func (c *authPasswordServiceClient) ForgotPassword(ctx context.Context, req *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error) {
	return c.forgotPassword.CallUnary(ctx, req)
}

// ResetPassword calls auth.v1.AuthPasswordService.ResetPassword.
func (c *authPasswordServiceClient) ResetPassword(ctx context.Context, req *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// AuthPasswordServiceHandler is an implementation of the auth.v1.AuthPasswordService service.
type AuthPasswordServiceHandler interface {
	// Login authenticates a user using email and password.
	// It verifies the provided credentials and returns authentication tokens upon success.
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Register creates a new user account with email and password.
	// It performs validation on the provided data and creates a new user account.
	// Returns authentication tokens upon successful registration.
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// ForgotPassword initiates the password recovery process.
	// It sends a password reset link to the user's email address.
	ForgotPassword(context.Context, *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error)
	// ResetPassword changes a user's password using a reset token.
	// It validates the token and updates the user's password.
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
}

// NewAuthPasswordServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthPasswordServiceHandler(svc AuthPasswordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authPasswordServiceMethods := v1.File_auth_v1_password_proto.Services().ByName("AuthPasswordService").Methods()
	authPasswordServiceLoginHandler := connect.NewUnaryHandler(
		AuthPasswordServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authPasswordServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authPasswordServiceRegisterHandler := connect.NewUnaryHandler(
		AuthPasswordServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(authPasswordServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	authPasswordServiceForgotPasswordHandler := connect.NewUnaryHandler(
		AuthPasswordServiceForgotPasswordProcedure,
		svc.ForgotPassword,
		connect.WithSchema(authPasswordServiceMethods.ByName("ForgotPassword")),
		connect.WithHandlerOptions(opts...),
	)
	authPasswordServiceResetPasswordHandler := connect.NewUnaryHandler(
		AuthPasswordServiceResetPasswordProcedure,
		svc.ResetPassword,
		connect.WithSchema(authPasswordServiceMethods.ByName("ResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthPasswordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthPasswordServiceLoginProcedure:
			authPasswordServiceLoginHandler.ServeHTTP(w, r)
		case AuthPasswordServiceRegisterProcedure:
			authPasswordServiceRegisterHandler.ServeHTTP(w, r)
		case AuthPasswordServiceForgotPasswordProcedure:
			authPasswordServiceForgotPasswordHandler.ServeHTTP(w, r)
		case AuthPasswordServiceResetPasswordProcedure:
			authPasswordServiceResetPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthPasswordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthPasswordServiceHandler struct{}

func (UnimplementedAuthPasswordServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthPasswordService.Login is not implemented"))
}

func (UnimplementedAuthPasswordServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthPasswordService.Register is not implemented"))
}

func (UnimplementedAuthPasswordServiceHandler) ForgotPassword(context.Context, *connect.Request[v1.ForgotPasswordRequest]) (*connect.Response[v1.ForgotPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthPasswordService.ForgotPassword is not implemented"))
}

func (UnimplementedAuthPasswordServiceHandler) ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthPasswordService.ResetPassword is not implemented"))
}
