// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/password.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/authhubdev/apis/gen/go/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PasswordServiceName is the fully-qualified name of the PasswordService service.
	PasswordServiceName = "auth.v1.PasswordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PasswordServiceLoginProcedure is the fully-qualified name of the PasswordService's Login RPC.
	PasswordServiceLoginProcedure = "/auth.v1.PasswordService/Login"
	// PasswordServiceRegisterProcedure is the fully-qualified name of the PasswordService's Register
	// RPC.
	PasswordServiceRegisterProcedure = "/auth.v1.PasswordService/Register"
	// PasswordServiceRequestPasswordResetProcedure is the fully-qualified name of the PasswordService's
	// RequestPasswordReset RPC.
	PasswordServiceRequestPasswordResetProcedure = "/auth.v1.PasswordService/RequestPasswordReset"
	// PasswordServiceResetPasswordProcedure is the fully-qualified name of the PasswordService's
	// ResetPassword RPC.
	PasswordServiceResetPasswordProcedure = "/auth.v1.PasswordService/ResetPassword"
)

// PasswordServiceClient is a client for the auth.v1.PasswordService service.
type PasswordServiceClient interface {
	// Login authenticates a user with email and password.
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Register creates a new account with email and password.
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// RequestPasswordReset initiates a password reset process.
	RequestPasswordReset(context.Context, *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error)
	// ResetPassword completes a password reset process with OTP verification.
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
}

// NewPasswordServiceClient constructs a client for the auth.v1.PasswordService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPasswordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PasswordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	passwordServiceMethods := v1.File_auth_v1_password_proto.Services().ByName("PasswordService").Methods()
	return &passwordServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+PasswordServiceLoginProcedure,
			connect.WithSchema(passwordServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+PasswordServiceRegisterProcedure,
			connect.WithSchema(passwordServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		requestPasswordReset: connect.NewClient[v1.RequestPasswordResetRequest, v1.RequestPasswordResetResponse](
			httpClient,
			baseURL+PasswordServiceRequestPasswordResetProcedure,
			connect.WithSchema(passwordServiceMethods.ByName("RequestPasswordReset")),
			connect.WithClientOptions(opts...),
		),
		resetPassword: connect.NewClient[v1.ResetPasswordRequest, v1.ResetPasswordResponse](
			httpClient,
			baseURL+PasswordServiceResetPasswordProcedure,
			connect.WithSchema(passwordServiceMethods.ByName("ResetPassword")),
			connect.WithClientOptions(opts...),
		),
	}
}

// passwordServiceClient implements PasswordServiceClient.
type passwordServiceClient struct {
	login                *connect.Client[v1.LoginRequest, v1.LoginResponse]
	register             *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	requestPasswordReset *connect.Client[v1.RequestPasswordResetRequest, v1.RequestPasswordResetResponse]
	resetPassword        *connect.Client[v1.ResetPasswordRequest, v1.ResetPasswordResponse]
}

// Login calls auth.v1.PasswordService.Login.
func (c *passwordServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls auth.v1.PasswordService.Register.
func (c *passwordServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// RequestPasswordReset calls auth.v1.PasswordService.RequestPasswordReset.
func (c *passwordServiceClient) RequestPasswordReset(ctx context.Context, req *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error) {
	return c.requestPasswordReset.CallUnary(ctx, req)
}

// ResetPassword calls auth.v1.PasswordService.ResetPassword.
func (c *passwordServiceClient) ResetPassword(ctx context.Context, req *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// PasswordServiceHandler is an implementation of the auth.v1.PasswordService service.
type PasswordServiceHandler interface {
	// Login authenticates a user with email and password.
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	// Register creates a new account with email and password.
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// RequestPasswordReset initiates a password reset process.
	RequestPasswordReset(context.Context, *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error)
	// ResetPassword completes a password reset process with OTP verification.
	ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error)
}

// NewPasswordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPasswordServiceHandler(svc PasswordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	passwordServiceMethods := v1.File_auth_v1_password_proto.Services().ByName("PasswordService").Methods()
	passwordServiceLoginHandler := connect.NewUnaryHandler(
		PasswordServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(passwordServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	passwordServiceRegisterHandler := connect.NewUnaryHandler(
		PasswordServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(passwordServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	passwordServiceRequestPasswordResetHandler := connect.NewUnaryHandler(
		PasswordServiceRequestPasswordResetProcedure,
		svc.RequestPasswordReset,
		connect.WithSchema(passwordServiceMethods.ByName("RequestPasswordReset")),
		connect.WithHandlerOptions(opts...),
	)
	passwordServiceResetPasswordHandler := connect.NewUnaryHandler(
		PasswordServiceResetPasswordProcedure,
		svc.ResetPassword,
		connect.WithSchema(passwordServiceMethods.ByName("ResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.PasswordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PasswordServiceLoginProcedure:
			passwordServiceLoginHandler.ServeHTTP(w, r)
		case PasswordServiceRegisterProcedure:
			passwordServiceRegisterHandler.ServeHTTP(w, r)
		case PasswordServiceRequestPasswordResetProcedure:
			passwordServiceRequestPasswordResetHandler.ServeHTTP(w, r)
		case PasswordServiceResetPasswordProcedure:
			passwordServiceResetPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPasswordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPasswordServiceHandler struct{}

func (UnimplementedPasswordServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordService.Login is not implemented"))
}

func (UnimplementedPasswordServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordService.Register is not implemented"))
}

func (UnimplementedPasswordServiceHandler) RequestPasswordReset(context.Context, *connect.Request[v1.RequestPasswordResetRequest]) (*connect.Response[v1.RequestPasswordResetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordService.RequestPasswordReset is not implemented"))
}

func (UnimplementedPasswordServiceHandler) ResetPassword(context.Context, *connect.Request[v1.ResetPasswordRequest]) (*connect.Response[v1.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordService.ResetPassword is not implemented"))
}
