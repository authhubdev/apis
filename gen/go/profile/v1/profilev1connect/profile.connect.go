// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: profile/v1/profile.proto

package profilev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/authhubdev/apis/gen/go/profile/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProfileServiceName is the fully-qualified name of the ProfileService service.
	ProfileServiceName = "profile.v1.ProfileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProfileServiceGetProfileProcedure is the fully-qualified name of the ProfileService's GetProfile
	// RPC.
	ProfileServiceGetProfileProcedure = "/profile.v1.ProfileService/GetProfile"
	// ProfileServiceUpdateEmailProcedure is the fully-qualified name of the ProfileService's
	// UpdateEmail RPC.
	ProfileServiceUpdateEmailProcedure = "/profile.v1.ProfileService/UpdateEmail"
	// ProfileServiceChangePasswordProcedure is the fully-qualified name of the ProfileService's
	// ChangePassword RPC.
	ProfileServiceChangePasswordProcedure = "/profile.v1.ProfileService/ChangePassword"
	// ProfileServiceVerifyEmailProcedure is the fully-qualified name of the ProfileService's
	// VerifyEmail RPC.
	ProfileServiceVerifyEmailProcedure = "/profile.v1.ProfileService/VerifyEmail"
	// ProfileServiceResendVerificationEmailProcedure is the fully-qualified name of the
	// ProfileService's ResendVerificationEmail RPC.
	ProfileServiceResendVerificationEmailProcedure = "/profile.v1.ProfileService/ResendVerificationEmail"
	// ProfileServiceGetAvatarUploadURLProcedure is the fully-qualified name of the ProfileService's
	// GetAvatarUploadURL RPC.
	ProfileServiceGetAvatarUploadURLProcedure = "/profile.v1.ProfileService/GetAvatarUploadURL"
	// ProfileServiceUpdateAvatarProcedure is the fully-qualified name of the ProfileService's
	// UpdateAvatar RPC.
	ProfileServiceUpdateAvatarProcedure = "/profile.v1.ProfileService/UpdateAvatar"
	// ProfileServiceRequestAccountDeletionProcedure is the fully-qualified name of the ProfileService's
	// RequestAccountDeletion RPC.
	ProfileServiceRequestAccountDeletionProcedure = "/profile.v1.ProfileService/RequestAccountDeletion"
	// ProfileServiceConfirmAccountDeletionProcedure is the fully-qualified name of the ProfileService's
	// ConfirmAccountDeletion RPC.
	ProfileServiceConfirmAccountDeletionProcedure = "/profile.v1.ProfileService/ConfirmAccountDeletion"
	// ProfileServiceUpdateProfileNameProcedure is the fully-qualified name of the ProfileService's
	// UpdateProfileName RPC.
	ProfileServiceUpdateProfileNameProcedure = "/profile.v1.ProfileService/UpdateProfileName"
)

// ProfileServiceClient is a client for the profile.v1.ProfileService service.
type ProfileServiceClient interface {
	// GetProfile retrieves the current user's profile information.
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	// UpdateEmail initiates the process to change the user's email address.
	// This typically requires verification of the new email.
	UpdateEmail(context.Context, *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error)
	// ChangePassword updates the user's password.
	// Requires verification of the current password for security.
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// VerifyEmail confirms a user's email address using a verification OTP.
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	// ResendVerificationEmail sends a new verification email to the user.
	ResendVerificationEmail(context.Context, *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error)
	// GetAvatarUploadURL generates a pre-signed URL for uploading a user avatar.
	GetAvatarUploadURL(context.Context, *connect.Request[v1.GetAvatarUploadURLRequest]) (*connect.Response[v1.GetAvatarUploadURLResponse], error)
	// UpdateAvatar updates the user's profile with the URL of an uploaded avatar.
	UpdateAvatar(context.Context, *connect.Request[v1.UpdateAvatarRequest]) (*connect.Response[v1.UpdateAvatarResponse], error)
	// RequestAccountDeletion initiates the process to delete a user's account.
	// This typically sends a confirmation email with a deletion OTP.
	RequestAccountDeletion(context.Context, *connect.Request[v1.RequestAccountDeletionRequest]) (*connect.Response[v1.RequestAccountDeletionResponse], error)
	// ConfirmAccountDeletion permanently deletes a user's account after verification.
	ConfirmAccountDeletion(context.Context, *connect.Request[v1.ConfirmAccountDeletionRequest]) (*connect.Response[v1.ConfirmAccountDeletionResponse], error)
	// UpdateProfileName updates the user's display name.
	UpdateProfileName(context.Context, *connect.Request[v1.UpdateProfileNameRequest]) (*connect.Response[v1.UpdateProfileNameResponse], error)
}

// NewProfileServiceClient constructs a client for the profile.v1.ProfileService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	profileServiceMethods := v1.File_profile_v1_profile_proto.Services().ByName("ProfileService").Methods()
	return &profileServiceClient{
		getProfile: connect.NewClient[v1.GetProfileRequest, v1.GetProfileResponse](
			httpClient,
			baseURL+ProfileServiceGetProfileProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetProfile")),
			connect.WithClientOptions(opts...),
		),
		updateEmail: connect.NewClient[v1.UpdateEmailRequest, v1.UpdateEmailResponse](
			httpClient,
			baseURL+ProfileServiceUpdateEmailProcedure,
			connect.WithSchema(profileServiceMethods.ByName("UpdateEmail")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+ProfileServiceChangePasswordProcedure,
			connect.WithSchema(profileServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		verifyEmail: connect.NewClient[v1.VerifyEmailRequest, v1.VerifyEmailResponse](
			httpClient,
			baseURL+ProfileServiceVerifyEmailProcedure,
			connect.WithSchema(profileServiceMethods.ByName("VerifyEmail")),
			connect.WithClientOptions(opts...),
		),
		resendVerificationEmail: connect.NewClient[v1.ResendVerificationEmailRequest, v1.ResendVerificationEmailResponse](
			httpClient,
			baseURL+ProfileServiceResendVerificationEmailProcedure,
			connect.WithSchema(profileServiceMethods.ByName("ResendVerificationEmail")),
			connect.WithClientOptions(opts...),
		),
		getAvatarUploadURL: connect.NewClient[v1.GetAvatarUploadURLRequest, v1.GetAvatarUploadURLResponse](
			httpClient,
			baseURL+ProfileServiceGetAvatarUploadURLProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetAvatarUploadURL")),
			connect.WithClientOptions(opts...),
		),
		updateAvatar: connect.NewClient[v1.UpdateAvatarRequest, v1.UpdateAvatarResponse](
			httpClient,
			baseURL+ProfileServiceUpdateAvatarProcedure,
			connect.WithSchema(profileServiceMethods.ByName("UpdateAvatar")),
			connect.WithClientOptions(opts...),
		),
		requestAccountDeletion: connect.NewClient[v1.RequestAccountDeletionRequest, v1.RequestAccountDeletionResponse](
			httpClient,
			baseURL+ProfileServiceRequestAccountDeletionProcedure,
			connect.WithSchema(profileServiceMethods.ByName("RequestAccountDeletion")),
			connect.WithClientOptions(opts...),
		),
		confirmAccountDeletion: connect.NewClient[v1.ConfirmAccountDeletionRequest, v1.ConfirmAccountDeletionResponse](
			httpClient,
			baseURL+ProfileServiceConfirmAccountDeletionProcedure,
			connect.WithSchema(profileServiceMethods.ByName("ConfirmAccountDeletion")),
			connect.WithClientOptions(opts...),
		),
		updateProfileName: connect.NewClient[v1.UpdateProfileNameRequest, v1.UpdateProfileNameResponse](
			httpClient,
			baseURL+ProfileServiceUpdateProfileNameProcedure,
			connect.WithSchema(profileServiceMethods.ByName("UpdateProfileName")),
			connect.WithClientOptions(opts...),
		),
	}
}

// profileServiceClient implements ProfileServiceClient.
type profileServiceClient struct {
	getProfile              *connect.Client[v1.GetProfileRequest, v1.GetProfileResponse]
	updateEmail             *connect.Client[v1.UpdateEmailRequest, v1.UpdateEmailResponse]
	changePassword          *connect.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	verifyEmail             *connect.Client[v1.VerifyEmailRequest, v1.VerifyEmailResponse]
	resendVerificationEmail *connect.Client[v1.ResendVerificationEmailRequest, v1.ResendVerificationEmailResponse]
	getAvatarUploadURL      *connect.Client[v1.GetAvatarUploadURLRequest, v1.GetAvatarUploadURLResponse]
	updateAvatar            *connect.Client[v1.UpdateAvatarRequest, v1.UpdateAvatarResponse]
	requestAccountDeletion  *connect.Client[v1.RequestAccountDeletionRequest, v1.RequestAccountDeletionResponse]
	confirmAccountDeletion  *connect.Client[v1.ConfirmAccountDeletionRequest, v1.ConfirmAccountDeletionResponse]
	updateProfileName       *connect.Client[v1.UpdateProfileNameRequest, v1.UpdateProfileNameResponse]
}

// GetProfile calls profile.v1.ProfileService.GetProfile.
func (c *profileServiceClient) GetProfile(ctx context.Context, req *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// UpdateEmail calls profile.v1.ProfileService.UpdateEmail.
func (c *profileServiceClient) UpdateEmail(ctx context.Context, req *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error) {
	return c.updateEmail.CallUnary(ctx, req)
}

// ChangePassword calls profile.v1.ProfileService.ChangePassword.
func (c *profileServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// VerifyEmail calls profile.v1.ProfileService.VerifyEmail.
func (c *profileServiceClient) VerifyEmail(ctx context.Context, req *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// ResendVerificationEmail calls profile.v1.ProfileService.ResendVerificationEmail.
func (c *profileServiceClient) ResendVerificationEmail(ctx context.Context, req *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error) {
	return c.resendVerificationEmail.CallUnary(ctx, req)
}

// GetAvatarUploadURL calls profile.v1.ProfileService.GetAvatarUploadURL.
func (c *profileServiceClient) GetAvatarUploadURL(ctx context.Context, req *connect.Request[v1.GetAvatarUploadURLRequest]) (*connect.Response[v1.GetAvatarUploadURLResponse], error) {
	return c.getAvatarUploadURL.CallUnary(ctx, req)
}

// UpdateAvatar calls profile.v1.ProfileService.UpdateAvatar.
func (c *profileServiceClient) UpdateAvatar(ctx context.Context, req *connect.Request[v1.UpdateAvatarRequest]) (*connect.Response[v1.UpdateAvatarResponse], error) {
	return c.updateAvatar.CallUnary(ctx, req)
}

// RequestAccountDeletion calls profile.v1.ProfileService.RequestAccountDeletion.
func (c *profileServiceClient) RequestAccountDeletion(ctx context.Context, req *connect.Request[v1.RequestAccountDeletionRequest]) (*connect.Response[v1.RequestAccountDeletionResponse], error) {
	return c.requestAccountDeletion.CallUnary(ctx, req)
}

// ConfirmAccountDeletion calls profile.v1.ProfileService.ConfirmAccountDeletion.
func (c *profileServiceClient) ConfirmAccountDeletion(ctx context.Context, req *connect.Request[v1.ConfirmAccountDeletionRequest]) (*connect.Response[v1.ConfirmAccountDeletionResponse], error) {
	return c.confirmAccountDeletion.CallUnary(ctx, req)
}

// UpdateProfileName calls profile.v1.ProfileService.UpdateProfileName.
func (c *profileServiceClient) UpdateProfileName(ctx context.Context, req *connect.Request[v1.UpdateProfileNameRequest]) (*connect.Response[v1.UpdateProfileNameResponse], error) {
	return c.updateProfileName.CallUnary(ctx, req)
}

// ProfileServiceHandler is an implementation of the profile.v1.ProfileService service.
type ProfileServiceHandler interface {
	// GetProfile retrieves the current user's profile information.
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	// UpdateEmail initiates the process to change the user's email address.
	// This typically requires verification of the new email.
	UpdateEmail(context.Context, *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error)
	// ChangePassword updates the user's password.
	// Requires verification of the current password for security.
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	// VerifyEmail confirms a user's email address using a verification OTP.
	VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error)
	// ResendVerificationEmail sends a new verification email to the user.
	ResendVerificationEmail(context.Context, *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error)
	// GetAvatarUploadURL generates a pre-signed URL for uploading a user avatar.
	GetAvatarUploadURL(context.Context, *connect.Request[v1.GetAvatarUploadURLRequest]) (*connect.Response[v1.GetAvatarUploadURLResponse], error)
	// UpdateAvatar updates the user's profile with the URL of an uploaded avatar.
	UpdateAvatar(context.Context, *connect.Request[v1.UpdateAvatarRequest]) (*connect.Response[v1.UpdateAvatarResponse], error)
	// RequestAccountDeletion initiates the process to delete a user's account.
	// This typically sends a confirmation email with a deletion OTP.
	RequestAccountDeletion(context.Context, *connect.Request[v1.RequestAccountDeletionRequest]) (*connect.Response[v1.RequestAccountDeletionResponse], error)
	// ConfirmAccountDeletion permanently deletes a user's account after verification.
	ConfirmAccountDeletion(context.Context, *connect.Request[v1.ConfirmAccountDeletionRequest]) (*connect.Response[v1.ConfirmAccountDeletionResponse], error)
	// UpdateProfileName updates the user's display name.
	UpdateProfileName(context.Context, *connect.Request[v1.UpdateProfileNameRequest]) (*connect.Response[v1.UpdateProfileNameResponse], error)
}

// NewProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileServiceHandler(svc ProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	profileServiceMethods := v1.File_profile_v1_profile_proto.Services().ByName("ProfileService").Methods()
	profileServiceGetProfileHandler := connect.NewUnaryHandler(
		ProfileServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(profileServiceMethods.ByName("GetProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceUpdateEmailHandler := connect.NewUnaryHandler(
		ProfileServiceUpdateEmailProcedure,
		svc.UpdateEmail,
		connect.WithSchema(profileServiceMethods.ByName("UpdateEmail")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceChangePasswordHandler := connect.NewUnaryHandler(
		ProfileServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(profileServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceVerifyEmailHandler := connect.NewUnaryHandler(
		ProfileServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		connect.WithSchema(profileServiceMethods.ByName("VerifyEmail")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceResendVerificationEmailHandler := connect.NewUnaryHandler(
		ProfileServiceResendVerificationEmailProcedure,
		svc.ResendVerificationEmail,
		connect.WithSchema(profileServiceMethods.ByName("ResendVerificationEmail")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceGetAvatarUploadURLHandler := connect.NewUnaryHandler(
		ProfileServiceGetAvatarUploadURLProcedure,
		svc.GetAvatarUploadURL,
		connect.WithSchema(profileServiceMethods.ByName("GetAvatarUploadURL")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceUpdateAvatarHandler := connect.NewUnaryHandler(
		ProfileServiceUpdateAvatarProcedure,
		svc.UpdateAvatar,
		connect.WithSchema(profileServiceMethods.ByName("UpdateAvatar")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceRequestAccountDeletionHandler := connect.NewUnaryHandler(
		ProfileServiceRequestAccountDeletionProcedure,
		svc.RequestAccountDeletion,
		connect.WithSchema(profileServiceMethods.ByName("RequestAccountDeletion")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceConfirmAccountDeletionHandler := connect.NewUnaryHandler(
		ProfileServiceConfirmAccountDeletionProcedure,
		svc.ConfirmAccountDeletion,
		connect.WithSchema(profileServiceMethods.ByName("ConfirmAccountDeletion")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceUpdateProfileNameHandler := connect.NewUnaryHandler(
		ProfileServiceUpdateProfileNameProcedure,
		svc.UpdateProfileName,
		connect.WithSchema(profileServiceMethods.ByName("UpdateProfileName")),
		connect.WithHandlerOptions(opts...),
	)
	return "/profile.v1.ProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProfileServiceGetProfileProcedure:
			profileServiceGetProfileHandler.ServeHTTP(w, r)
		case ProfileServiceUpdateEmailProcedure:
			profileServiceUpdateEmailHandler.ServeHTTP(w, r)
		case ProfileServiceChangePasswordProcedure:
			profileServiceChangePasswordHandler.ServeHTTP(w, r)
		case ProfileServiceVerifyEmailProcedure:
			profileServiceVerifyEmailHandler.ServeHTTP(w, r)
		case ProfileServiceResendVerificationEmailProcedure:
			profileServiceResendVerificationEmailHandler.ServeHTTP(w, r)
		case ProfileServiceGetAvatarUploadURLProcedure:
			profileServiceGetAvatarUploadURLHandler.ServeHTTP(w, r)
		case ProfileServiceUpdateAvatarProcedure:
			profileServiceUpdateAvatarHandler.ServeHTTP(w, r)
		case ProfileServiceRequestAccountDeletionProcedure:
			profileServiceRequestAccountDeletionHandler.ServeHTTP(w, r)
		case ProfileServiceConfirmAccountDeletionProcedure:
			profileServiceConfirmAccountDeletionHandler.ServeHTTP(w, r)
		case ProfileServiceUpdateProfileNameProcedure:
			profileServiceUpdateProfileNameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileServiceHandler struct{}

func (UnimplementedProfileServiceHandler) GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.GetProfile is not implemented"))
}

func (UnimplementedProfileServiceHandler) UpdateEmail(context.Context, *connect.Request[v1.UpdateEmailRequest]) (*connect.Response[v1.UpdateEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.UpdateEmail is not implemented"))
}

func (UnimplementedProfileServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.ChangePassword is not implemented"))
}

func (UnimplementedProfileServiceHandler) VerifyEmail(context.Context, *connect.Request[v1.VerifyEmailRequest]) (*connect.Response[v1.VerifyEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.VerifyEmail is not implemented"))
}

func (UnimplementedProfileServiceHandler) ResendVerificationEmail(context.Context, *connect.Request[v1.ResendVerificationEmailRequest]) (*connect.Response[v1.ResendVerificationEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.ResendVerificationEmail is not implemented"))
}

func (UnimplementedProfileServiceHandler) GetAvatarUploadURL(context.Context, *connect.Request[v1.GetAvatarUploadURLRequest]) (*connect.Response[v1.GetAvatarUploadURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.GetAvatarUploadURL is not implemented"))
}

func (UnimplementedProfileServiceHandler) UpdateAvatar(context.Context, *connect.Request[v1.UpdateAvatarRequest]) (*connect.Response[v1.UpdateAvatarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.UpdateAvatar is not implemented"))
}

func (UnimplementedProfileServiceHandler) RequestAccountDeletion(context.Context, *connect.Request[v1.RequestAccountDeletionRequest]) (*connect.Response[v1.RequestAccountDeletionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.RequestAccountDeletion is not implemented"))
}

func (UnimplementedProfileServiceHandler) ConfirmAccountDeletion(context.Context, *connect.Request[v1.ConfirmAccountDeletionRequest]) (*connect.Response[v1.ConfirmAccountDeletionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.ConfirmAccountDeletion is not implemented"))
}

func (UnimplementedProfileServiceHandler) UpdateProfileName(context.Context, *connect.Request[v1.UpdateProfileNameRequest]) (*connect.Response[v1.UpdateProfileNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.UpdateProfileName is not implemented"))
}
