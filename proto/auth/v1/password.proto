syntax = "proto3";

package auth.v1;

import "auth/v1/common.proto";

option go_package = "github.com/authhubdev/apis/gen/go/auth/v1;authv1";

// AuthPasswordService provides password-based authentication operations.
service AuthPasswordService {
  // Login authenticates a user using email and password.
  // It verifies the provided credentials and returns authentication tokens upon success.
  rpc Login(LoginRequest) returns (LoginResponse);

  // Register creates a new user account with email and password.
  // It performs validation on the provided data and creates a new user account.
  // Returns authentication tokens upon successful registration.
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // ForgotPassword initiates the password recovery process.
  // It sends a password reset link to the user's email address.
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);

  // ResetPassword changes a user's password using a reset token.
  // It validates the token and updates the user's password.
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
}

// LoginRequest contains credentials for authentication.
message LoginRequest {
  // Email address of the user.
  // Must be a valid email format between 5 and 255 characters.
  string email = 1;
  
  // User password.
  // Must be between 6 and 100 characters.
  string password = 2;
}

// LoginResponse contains the authentication result.
message LoginResponse {
  // Authentication data including tokens and user information.
  AuthResponse auth = 1;
}

// RegisterRequest contains information for creating a new user account.
message RegisterRequest {
  // Email address of the user.
  // Must be a valid email format between 5 and 255 characters.
  string email = 1;
  
  // User password.
  // Must be between 6 and 100 characters.
  string password = 2;
  
  // Optional user name.
  // If provided, must be between 2 and 100 characters.
  optional string name = 3;
}

// RegisterResponse contains the registration result.
message RegisterResponse {
  // Authentication data including tokens and user information.
  AuthResponse auth = 1;
}

// ForgotPasswordRequest initiates password recovery.
message ForgotPasswordRequest {
  // Email address of the user requesting password recovery.
  // Must be a valid email format between 5 and 255 characters.
  string email = 1;
}

// ForgotPasswordResponse indicates the password recovery process has started.
message ForgotPasswordResponse {
  // Indicates whether the password recovery request was successfully processed.
  // Note: For security reasons, this may return true even if the email doesn't exist.
  SuccessResponse result = 1;
}

// ResetPasswordRequest contains information for resetting a password.
message ResetPasswordRequest {
  // Password reset token received via email.
  // Must not be empty.
  string token = 1;
  
  // New password to set.
  // Must be between 6 and 100 characters.
  string password = 2;
  
  // New password confirmation.
  // Must match the password field and be between 6 and 100 characters.
  string password_confirmation = 3;
}

// ResetPasswordResponse indicates the result of the password reset.
message ResetPasswordResponse {
  // Indicates whether the password was successfully reset.
  SuccessResponse result = 1;
}